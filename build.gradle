/*
 * https://guides.gradle.org/creating-new-gradle-builds/
 */

plugins {
    id 'base'
    id 'eclipse'
    id 'idea'
    id 'com.diffplug.spotless'
    id 'com.palantir.git-version'
}

eclipse {
    classpath {
        downloadJavadoc = true
        downloadSources = true
    }
}

idea {
    module {
        downloadJavadoc = true
        downloadSources = true
    }
}

spotless {
    encoding 'UTF-8'
    java {
        target fileTree(projectDir) {
            include '**/src/main/java/**/*.java'
            exclude '**/build/**'
            exclude '.gradle'
            exclude '.github'
        }
        leadingTabsToSpaces(4)
        removeUnusedImports()
    }
}

allprojects {
    new File("${rootDir}/README.adoc").withReader('utf-8') { description = it.readLine().minus('= ') }
    group = 'esy'
    version = gitVersion()
    repositories {
        if (project.hasProperty("defaultMavenRepository")) {
            maven {
                url "$defaultMavenRepository"
            }
        }
        mavenCentral()
    }
}

subprojects {
    plugins.withType(JavaPlugin).configureEach {
        compileJava.options.encoding = 'UTF-8'
        java.sourceCompatibility = JavaVersion.VERSION_21
        java.targetCompatibility = JavaVersion.VERSION_21
    }
    tasks.withType(Test).tap {
        configureEach {
            useJUnitPlatform {
                excludeEngines 'junit-vintage'
            }
            systemProperty "file.encoding", "UTF-8"
            testLogging {
                events "passed", "skipped", "failed"
                exceptionFormat "full"
                showExceptions true
                showCauses true
                showStackTraces true
                showStandardStreams false
            }
        }
    }
}

ext.VERSION = new File("${rootDir}/VERSION").text
tasks.register('versionCheck') {
    build.dependsOn it
    println versionDetails()
    assert new File("${rootDir}/VERSION.md")
            .text
            .startsWith("# Version " + VERSION)
}
