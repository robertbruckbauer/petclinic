plugins {
    id 'java'
    id 'io.spring.dependency-management'
    id 'org.springframework.boot'
}

dependencies {
    implementation project(':app:backend')
    // https://projectlombok.org
    implementation('org.projectlombok:lombok')
    annotationProcessor('org.projectlombok:lombok')
    // https://spring.io/projects/spring-data
    runtimeOnly('org.hsqldb:hsqldb')
}
dependencies {
    // https://spring.io/projects/spring-boot
    testImplementation('org.springframework.boot:spring-boot-starter-test')
    // https://junit.org/junit5
    testImplementation('org.junit.jupiter:junit-jupiter')
    // https://site.mockito.org/
    testImplementation('org.mockito:mockito-junit-jupiter')
}

processResources {
    with copySpec {
        from("${rootDir}")
        include 'VERSION'
    }
}

jar {
    enabled = false
}

bootJar {
    enabled = true
    manifest {
        attributes 'Specification-Title': project.name
        attributes 'Specification-Version': VERSION
        attributes 'Implementation-Title': project.name
        attributes 'Implementation-Version': project.version
    }
}

import java.util.Optional;
ext.SERVER_IMAGE = Optional.ofNullable(System.getenv("SERVER_IMAGE"))
            .orElse(rootProject.name + "/" + project.name)
ext.SERVER_TAG = Optional.ofNullable(System.getenv("SERVER_TAG"))
            .orElse('latest')

bootBuildImage {
    group = 'build'
    enabled = true
    imageName = SERVER_IMAGE + ":" + SERVER_TAG
    tags = [SERVER_IMAGE + ":" + VERSION]
    environment = [
        "BP_JVM_VERSION":"21.*",
        "BP_SPRING_CLOUD_BINDINGS_DISABLED":"true"
    ]
}

tasks.register('buildImage') {
    group = 'build'
    enabled = true
    mustRunAfter 'build'
    dependsOn 'bootBuildImage'
}

// https://docs.docker.com/reference/cli/docker/build/
// https://docs.docker.com/reference/cli/docker/container/run/
tasks.register('dockerRun') {
    doLast {
        exec {
            workingDir "${projectDir}"
            executable 'docker'
            args 'build', '.', '-t', SERVER_IMAGE
        }
        exec {
            workingDir "${projectDir}"
            executable 'docker'
            args 'run', '-d', '--rm', '-p', '8080:8080', SERVER_IMAGE
        }
    }
}

tasks.register('versionCheck') {
    build.dependsOn it
}
